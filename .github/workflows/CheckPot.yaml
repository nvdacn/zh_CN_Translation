name: Automatically update NVDA.po

on:
  push:
    branches:
      - "20*"
    paths:
      - 'Translation/LC_MESSAGES/*.po'
  schedule:
    - cron: '0 0,3,6,9 * * 1-5'
    - cron: '0 11 * * *'
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
  Check-NVDA-Repository-Update:
    name: Check NVDA repository update
    if: ${{ vars.RunCheckPot }}
    runs-on: ubuntu-latest
    outputs:
      has_update: ${{ steps.check_update.outputs.has_update }}
    steps:
      - name: Get current SHA
        id: get_current_sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/nvaccess/nvda/branches/master)
          current_sha=$(echo "$response" | jq -r '.commit.sha')
          echo "current_sha=$current_sha" >> $GITHUB_OUTPUT
          echo "CACHE_KEY=nvda-sha-$current_sha" >> $GITHUB_ENV
      - name: Check SHA cache
        id: cache_sha
        uses: actions/cache@v4
        with:
          path: .sha_cache
          key: ${{ env.CACHE_KEY }}
          lookup-only: true
      - name: Determine update status
        id: check_update
        run: |
          if [[ "${{ steps.cache_sha.outputs.cache-hit }}" == 'true' ]]; then
            echo "Cache hit, no updates."
            echo "has_update=false" >> $GITHUB_OUTPUT
          else
            echo "Cache miss, new updates."
            echo "has_update=true" >> $GITHUB_OUTPUT
            mkdir -p .sha_cache
            echo "${{ steps.get_current_sha.outputs.current_sha }}" > .sha_cache/latest_sha
            echo "Cached SHA: $(cat .sha_cache/latest_sha)"
          fi

  Determine-Branch:
    name: Determine branch
    if: ${{ vars.RunCheckPot }}
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.Determine_branch.outputs.Branch }}
    steps:
      - name: Checkout NVDA buildVersion.py
        uses: actions/checkout@v5
        with:
          repository: nvaccess/nvda
          ref: master
          path: ${{ github.workspace }}/NVDA
          sparse-checkout: source/buildVersion.py
      - name: Determine branch name
        id: Determine_branch
        run: |
          versionFile="${{ github.workspace }}/NVDA/source/buildVersion.py"
          versionYear=$(grep -oP 'version_year\s*=\s*\K\d+' "$versionFile")
          versionMajor=$(grep -oP 'version_major\s*=\s*\K\d+' "$versionFile")
          branchName="$versionYear.$versionMajor"
          echo "Branch=$branchName" >> $GITHUB_OUTPUT
      - name: Check branch exists
        id: check_branch
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/${{ steps.Determine_branch.outputs.Branch }}'
              });
              console.log(`Branch ${{ steps.Determine_branch.outputs.Branch }} exists`);
              return true;
            } catch (error) {
              if (error.status === 404) {
                console.log(`Branch ${{ steps.Determine_branch.outputs.Branch }} does not exist`);
                return false;
              }
              throw error;
            }
          result-encoding: string
      - name: Create branch
        if: steps.check_branch.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const UploadsSHA = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/Uploads'
            });
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${{ steps.Determine_branch.outputs.Branch }}`,
              sha: UploadsSHA.data.object.sha
            });
            console.log(`Branch ${{ steps.Determine_branch.outputs.Branch }} created successfully from Uploads`);

  Update-NVDA-po:
    name: Automatically update NVDA.po
    needs: 
      - Check-NVDA-Repository-Update
      - Determine-Branch
    if: ${{ needs.Check-NVDA-Repository-Update.outputs.has_update == 'true' }}
    runs-on: windows-latest
    steps:
      - name: Checkout ${{ github.repository }} repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ needs.Determine-Branch.outputs.branch }}
      - name: Install dependencies
        uses: ./.github/workflows/InstallDependencies
        with:
          ref: master
          submodules: true
          Download-gettext: true
      - name: Configure environment
        id: Set_Environment_Variables
        shell: pwsh
        run: |
          echo "VSCMD_SKIP_SENDTELEMETRY=1" >> $env:GITHUB_ENV
          echo "SCONS_CACHE_MSVC_CONFIG=${{ github.workspace }}\Tools\NVDA\.scons_msvc_cache.json" >> $env:GITHUB_ENV
          echo "SCONS_CACHE_KEY=scons_msvc_cache-$env:RUNNER_OS-$env:ImageVersion" >> $env:GITHUB_ENV
          cd "${{ github.workspace }}/Tools/NVDA"
          $commit = (git rev-parse HEAD).Substring(0,8)
          echo "commit=$commit" >> $env:GITHUB_OUTPUT
          cd "${{ github.workspace }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          &"${{ github.workspace }}\Tools\7Zip\7z.exe" e "${{ github.workspace }}\PotXliff\Temp\gettext.zip" "bin\msgmerge.exe" -aoa -o"${{ github.workspace }}\Tools"
      - name: SCons MSVC Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SCONS_CACHE_MSVC_CONFIG }}
          key: ${{ env.SCONS_CACHE_KEY }}
      - name: CheckPot
        shell: cmd
        run: |
          cd /d ${{ github.workspace }}\Tools\NVDA
          scons checkPot --all-cores
      - name: Update NVDA.po
        shell: pwsh
        run: |
          &"${{ github.workspace }}\Tools\msgmerge.exe" --update  --backup=none --previous "${{ github.workspace }}\Translation\LC_MESSAGES\nvda.po" "${{ github.workspace }}\Tools\NVDA\output\nvda.pot"
          git add "Translation/LC_MESSAGES/nvda.po"
          git diff --cached --quiet
          if ($LASTEXITCODE -ne 0) {
              git commit -m "更新 NVDA 界面消息翻译字符串（alpha-${{ steps.Set_Environment_Variables.outputs.commit }}）"
              git push origin ${{ needs.Determine-Branch.outputs.branch }}:${{ needs.Determine-Branch.outputs.branch }}
          } else {
              Write-Host "No changes to commit, skipping commit and push."
          }
      - name: Upload Output
        uses: actions/upload-artifact@v4
        with:
          name: NVDA.pot
          path: ${{ github.workspace }}/Tools/NVDA/output/*
